"""
Django settings for swf_monitor_project project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure--np2=%3ftuxijbpmtb8nf0=ux$4_%e)ye&l829((8olx&8z2*d"
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG to False in production by setting the environment variable DEBUG=False
DEBUG = config('DEBUG', default=True, cast=bool)

# Define allowed hosts. 
# IMPORTANT: Use SWF_ALLOWED_HOSTS environment variable to configure allowed hosts.
# This is a comma-separated list of domain names/IP addresses that can serve this application.
# Example: SWF_ALLOWED_HOSTS=swf-monitor.example.com,www.swf-monitor.example.com,10.0.0.1
# 
# Security Note: Never hardcode production hostnames in this file. Always use environment variables
# to avoid exposing infrastructure details in the codebase.
ALLOWED_HOSTS = []

# Get allowed hosts from environment variable SWF_ALLOWED_HOSTS
allowed_hosts_str = config('SWF_ALLOWED_HOSTS', default='')
if allowed_hosts_str:
    ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_str.split(',')]
elif DEBUG:
    # Only use default localhost values in development when SWF_ALLOWED_HOSTS is not set
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'testserver']
else:
    # In production, SWF_ALLOWED_HOSTS must be set or Django will raise ImproperlyConfigured
    # This is a security feature to prevent the site from running with improper host validation
    pass


# Application definition

INSTALLED_APPS = [
    "daphne",  # Add daphne for ASGI server
    "channels",  # Add channels for WebSocket support
    "mcp_app",  # Changed from "swf_monitor_project.mcp_app"
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "monitor_app",  # Changed from "swf_monitor_project.monitor_app"
    "django_dbml",  # For schema diagram generation
    # Third-party apps
    "rest_framework",
    "drf_spectacular",
    "rest_framework.authtoken",
    "django_seed",
    "django_extensions",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "swf_monitor_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "swf_monitor_project.wsgi.application"
ASGI_APPLICATION = "swf_monitor_project.asgi.application"  # Added ASGI application


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("DB_NAME", default="swfdb"),
        "USER": config("DB_USER", default="admin"),
        "PASSWORD": config("DB_PASSWORD"),
        "HOST": config("DB_HOST", default="localhost"),
        "PORT": config("DB_PORT", default="5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# WhiteNoise configuration
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = '/home/'  # Redirect to the new authenticated home page after login
LOGOUT_REDIRECT_URL = '/'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Django REST framework settings
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly"
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
}

SPECTACULAR_SETTINGS = {
    "TITLE": "SWF Monitor API",
    "DESCRIPTION": "API for the ePIC Streaming Workflow Testbed Monitor",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    # OTHER SETTINGS
}

# ActiveMQ Settings
ACTIVEMQ_HOST = config('ACTIVEMQ_HOST', default='localhost')
ACTIVEMQ_PORT = config('ACTIVEMQ_PORT', default=61612, cast=int)
ACTIVEMQ_USER = config('ACTIVEMQ_USER', default='admin')
ACTIVEMQ_PASSWORD = config('ACTIVEMQ_PASSWORD', default='admin')
ACTIVEMQ_HEARTBEAT_TOPIC = config('ACTIVEMQ_HEARTBEAT_TOPIC', default='/topic/heartbeat') # Updated to working topic
ACTIVEMQ_USE_SSL = config('ACTIVEMQ_USE_SSL', default=False, cast=bool)
ACTIVEMQ_SSL_CERT_FILE = config('ACTIVEMQ_SSL_CERT_FILE', default='')
ACTIVEMQ_SSL_KEY_FILE = config('ACTIVEMQ_SSL_KEY_FILE', default='')
ACTIVEMQ_SSL_CA_CERTS = config('ACTIVEMQ_SSL_CA_CERTS', default='')

# Channel layer settings (using in-memory for now, consider Redis for production)
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

# Basic Logging Configuration
# Set DJANGO_LOGGING_MODE='none' to disable all logging configuration (useful for schema generation, etc.)
LOGGING_MODE = os.getenv('DJANGO_LOGGING_MODE', 'normal')

if LOGGING_MODE == 'none':
    # Minimal logging configuration with no external dependencies
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'null': {
                'class': 'logging.NullHandler',
            },
        },
        'root': {
            'handlers': ['null'],
        },
    }
else:
    # Normal logging configuration
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'json': {
                '()': 'pythonjsonlogger.json.JsonFormatter',
                'format': '%(asctime)s %(name)s %(levelname)s %(module)s %(funcName)s %(lineno)d %(message)s',
                'rename_fields': {
                    'funcName': 'funcname'
                }
            },
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'json',
            },
            'rest': {
                'class': 'swf_common_lib.logging_utils.RestLogHandler',
                'url': 'http://localhost:8002/api/logs/',
                'formatter': 'json',
            },
        },
        'root': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
                'propagate': False,
            },
        },
    }
